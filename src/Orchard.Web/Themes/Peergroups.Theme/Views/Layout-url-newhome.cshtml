@using Orchard.Autoroute.Services
@using Orchard.ContentManagement
@using Orchard.ContentManagement.Aspects
@using Orchard.Localization.Services
@using Orchard.MediaLibrary.Fields
@using System.Globalization
@using WijDelen.UserImport.Models

@functions {
    // To support the layout classifaction below. Implementing as a razor function because we can, could otherwise be a Func<string[], string, string> in the code block following.
    string CalcuClassify(string[] zoneNames, string classNamePrefix) {
        var zoneCounter = 0;
        var zoneNumsFilled = string.Join("", zoneNames.Select(zoneName => {
            ++zoneCounter;
            return Model[zoneName] != null ? zoneCounter.ToString() : "";
        }).ToArray());
        return HasText(zoneNumsFilled) ? classNamePrefix + zoneNumsFilled : "";
    }

}
@{
    /* Global includes for the theme
    ***************************************************************/

    SetMeta(httpEquiv: "X-UA-Compatible", content: "IE=edge,chrome=1");

#if DEBUG
    Style.Include("Styles.css");
#else
    Style.Include("Styles.min.css");
#endif

    Script.Include("script.js");

    /* Layout classification based on filled zones
    ***************************************************************/

    //Add classes to the wrapper div to toggle aside widget zones on and off
    var asideClass = CalcuClassify(new[] {"AsideFirst", "AsideSecond"}, "aside-"); // for aside-1, aside-2 or aside-12 if any of the aside zones are filled
    if (HasText(asideClass)) {
        Model.Classes.Add(asideClass);
    }
}

@{
    var localizableAspects = Enumerable.Empty<ILocalizableAspect>();
    var homePage = WorkContext.Resolve<IHomeAliasService>().GetHomePage();

    if (homePage != null && homePage.Has<ILocalizableAspect>())
    {
        var localizationService = WorkContext.Resolve<ILocalizationService>();
        localizableAspects = localizationService.GetLocalizations(homePage).Concat(new[] { homePage.As<ILocalizableAspect>() });
    }
}

@*<div class="container container-homepage">
    <div class="row">
        <div class="column homepage-column-left homepage-column-top">
        </div>
        <div class="column homepage-column-top">
            @Html.ActionLink(T("Sign In").ToString(), "LogOn", new { Controller = "Account", Area = "Orchard.Users", ReturnUrl = Url.Action("Index", "ObjectRequest", new {area="WijDelen.ObjectSharing"}, Request.Url.Scheme) }, new { rel = "nofollow", @class="button homepage-login-link" })
            @foreach (var localization in localizableAspects) {
                if (localization.Culture == null) {
                    continue;
                }

                var culture = CultureInfo.GetCultureInfo(localization.Culture);

                @Html.ActionLink(T("{0}", culture.Parent.TwoLetterISOLanguageName).ToString(), "ChangeCulture", new { Controller = "Culture", Area = "WijDelen.Localization", Culture = culture.Name, ReturnUrl = Url.ItemDisplayUrl(localization) }, new { @class= "button homepage-language-link" })
            }
        </div>
    </div>
</div>*@
<div class="container-homepage-fullwidth">
    @if (Model.Content != null) {
        @Display(Model.Content)
    }
</div>