@functions {
    // To support the layout classifaction below. Implementing as a razor function because we can, could otherwise be a Func<string[], string, string> in the code block following.
    string CalcuClassify(string[] zoneNames, string classNamePrefix) {
        var zoneCounter = 0;
        var zoneNumsFilled = string.Join("", zoneNames.Select(zoneName => {
            ++zoneCounter;
            return Model[zoneName] != null ? zoneCounter.ToString() : "";
        }).ToArray());
        return HasText(zoneNumsFilled) ? classNamePrefix + zoneNumsFilled : "";
    }

}
@{
    /* Global includes for the theme
    ***************************************************************/

    SetMeta(httpEquiv: "X-UA-Compatible", content: "IE=edge,chrome=1");

#if DEBUG
    Style.Include("Styles.css");
#else
    Style.Include("Styles.min.css");
#endif

    Script.Include("script.js");

    /* Layout classification based on filled zones
    ***************************************************************/

    //Add classes to the wrapper div to toggle aside widget zones on and off
    var asideClass = CalcuClassify(new[] {"AsideFirst", "AsideSecond"}, "aside-"); // for aside-1, aside-2 or aside-12 if any of the aside zones are filled
    if (HasText(asideClass)) {
        Model.Classes.Add(asideClass);
    }
}

<div class="navigation">
    <div class="container">
        <div class="row">
            <div class="column">
                <a href="@Href("~/")">
                    <img src="@Url.Content(Html.ThemePath(WorkContext.CurrentTheme, "/Content/navigation-top-logo-belgium.png"))"/>
                </a>
            </div>
            <div class="column column-50">
                @Display(Model.Navigation)
            </div>
            <div class="column column-10">
                @Display(New.User())
            </div>
        </div>
    </div>
</div>

<div class="container">

    @if (Model.Messages != null) {
        <div class="row">
            <div class="column">
                @Display(Model.Messages)
            </div>
        </div>
    }

    <div class="row">
        <div class="column">
            <div class="row">
                <div class="column">
                    @if (Model.Content != null) {
                        @Display(Model.Content)
                    }
                </div>
            </div>
            <div class="row">
                <div class="column">
                    @if (Model.Header != null) {
                        @Display(Model.Header)
                    }
                </div>
            </div>
        </div>

        @if (Model.AsideFirst != null) {
            <div class="column column-25">
                @Display(Model.AsideFirst)
            </div>
        }

    </div>

    @if (Model.Footer != null) {
        <div class="row">
            <div class="column">
                @Display(Model.Footer)
            </div>
        </div>
    }

</div>