@model WijDelen.Reports.ViewModels.GroupsViewModel

@{
    Layout.Title = T("Groups").ToString();

#if DEBUG
    Style.Include("WijDelen.Reports.Styles.css");
#else
    Style.Include("WijDelen.Reports.Styles.min.css");
#endif

    Style.Require("jQueryCalendars_Picker");
    Style.Require("jQueryTimeEntry");
    Style.Require("jQueryDateTimeEditor");

    Script.Require("jQueryCalendars_Picker").AtFoot();
    Script.Require("jQueryTimeEntry").AtFoot();
    Script.Include("xlsx.full.min.js").AtFoot();
    Script.Include("FileSaver.min.js").AtFoot();
}

<div class="row">
    <div class="column">
        @using (Html.BeginFormAntiForgeryPost(Url.Action("Groups", "Admin", new {Area = "WijDelen.Reports"}), FormMethod.Get)) {
            @Html.ValidationSummary()

            @Html.LabelFor(x => x.StartDate, T("Group").Text, new { @class = "reportsdetails-label reportsdetails-label-first" })
            @Html.DropDownListFor(x => x.SelectedGroupId, new SelectList(Model.Groups, "Id", "Name"))

            @Html.LabelFor(x => x.StartDate, T("From").Text, new { @class= "reportsdetails-label" })
            @Html.TextBoxFor(m => m.StartDate, "{0:d/MM/yyyy}", new { @class = "text", id = "reportsdetails-startdate" })

            @Html.LabelFor(x => x.StopDate, T("To").Text, new { @class = "reportsdetails-label" })

            @Html.TextBoxFor(m => m.StopDate, "{0:d/MM/yyyy}", new {@class= "text", id= "reportsdetails-stopdate" })

            <button type="submit">@T("Apply")</button>

            <a id="exportToExcelLink">@T("Export to Excel")</a>
        }
    </div>
</div>

<div class="row">
    <div class="column">
        @if (!Model.GroupDetails.Any()) {
            <div class="reports-nodata">
                @T("Boink! There aren't any groups with valuable data yet.")
            </div>
        }
        
        <table class="reports-numbers" id="reportTable">
            <thead>
            <tr>
                <th>@T("Group")</th>
                <th>@T("Requests")</th>
                <th>@T("Mails")</th>
                <th>@T("Yes")</th>
                <th>@T("No")</th>
                <th>@T("Not Now")</th>
            </tr>
            </thead>
            <tbody>
            @{
                foreach (var groupDetailsViewModel in Model.GroupDetails) {
                    <tr>
                        <td class="reports-numbersitem">@groupDetailsViewModel.GroupName</td>
                        <td>@groupDetailsViewModel.RequestCount</td>
                        <td>@groupDetailsViewModel.MailCount</td>
                        <td>@groupDetailsViewModel.YesCount</td>
                        <td>@groupDetailsViewModel.NoCount</td>
                        <td>@groupDetailsViewModel.NotNowCount</td>
                    </tr>
                }
            }
            </tbody>
        </table>
    </div>
</div>

@using (Script.Foot()) {
    @Display.CalendarsPickerLocalization()

    <script type="text/javascript">
        $(function () {
            var calendarPickerOptions = {
                showAnim: "",
                renderer: $.extend({}, $.calendarsPicker.themeRollerRenderer, {
                    picker: "<div {popup:start} id='ui-datepicker-div'{popup:end} class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all{inline:start} ui-datepicker-inline{inline:end}'><div class='ui-datepicker-header ui-widget-header ui-helper-clearfix ui-corner-all'>{link:prev}{link:today}{link:next}</div>{months}{popup:start}{popup:end}<div class='ui-helper-clearfix'></div></div>",
                    month: "<div class='ui-datepicker-group'><div class='ui-datepicker-month ui-helper-clearfix'>{monthHeader:MM yyyy}</div><table class='ui-datepicker-calendar'><thead>{weekHeader}</thead><tbody>{weeks}</tbody></table></div>"
                })
            };

            $("#reportsdetails-startdate").calendarsPicker(calendarPickerOptions);
            $("#reportsdetails-stopdate").calendarsPicker(calendarPickerOptions);
        });

        function s2ab(s) {
            if (typeof ArrayBuffer !== 'undefined') {
                var buf = new ArrayBuffer(s.length);
                var view = new Uint8Array(buf);
                for (var i = 0; i != s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;
                return buf;
            } else {
                var buf = new Array(s.length);
                for (var i = 0; i != s.length; ++i) buf[i] = s.charCodeAt(i) & 0xFF;
                return buf;
            }
        }

        $("#exportToExcelLink").click(function () {
            var reportTable = document.getElementById('reportTable');

            var wb = XLSX.utils.table_to_book(reportTable, { sheet: "Data" });
            var wbout = XLSX.write(wb, { bookType: 'xlsx', bookSST: true, type: 'binary' });
            var fname = '@(@T("Groups").ToString() + ".xlsx")';
            try {
                saveAs(new Blob([s2ab(wbout)], { type: "application/octet-stream" }), fname);
            } catch (e) {
                if (typeof console != 'undefined') console.log(e, wbout);
            }
            return wbout;
        });
    </script>
}